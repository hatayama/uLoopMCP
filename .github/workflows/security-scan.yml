name: Security Code Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Packages/src/**/*.cs'
      - 'Assets/**/*.cs'
  pull_request:
    branches: [ main ]
    paths:
      - 'Packages/src/**/*.cs'
      - 'Assets/**/*.cs'

jobs:
  security-scan:
    name: C# Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Install SecurityCodeScan
      run: dotnet tool install --global security-scan

    - name: Generate Unity project files
      run: |
        # Unity project files generation would normally be done here
        # For now, we'll scan C# files directly
        echo "Scanning C# files in Packages/src directory"

    - name: Run SecurityCodeScan on uMCP Package
      run: |
        # Create a temporary project file for scanning
        cat > temp-umcp.csproj << 'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net6.0</TargetFramework>
            <Nullable>enable</Nullable>
          </PropertyGroup>
          <ItemGroup>
            <Compile Include="Packages/src/**/*.cs" />
          </ItemGroup>
          <ItemGroup>
            <PackageReference Include="SecurityCodeScan.VS2019" Version="5.6.7" PrivateAssets="all" />
          </ItemGroup>
        </Project>
        EOF
        
        # Run security scan with SARIF output
        dotnet build temp-umcp.csproj --configuration Release --verbosity normal --logger "sarif;logFileName=security-results.sarif"

    - name: Upload SARIF results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: security-results.sarif
        category: "SecurityCodeScan"

    - name: Upload security scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-results.sarif

  typescript-security:
    name: TypeScript Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'Packages/src/TypeScriptServer~/package-lock.json'

    - name: Install dependencies
      working-directory: Packages/src/TypeScriptServer~
      run: npm ci

    - name: Run TypeScript security check
      working-directory: Packages/src/TypeScriptServer~
      run: npm run security:check

    - name: Upload ESLint results
      if: always()
      working-directory: Packages/src/TypeScriptServer~
      run: |
        # Generate SARIF output for ESLint security results
        npx eslint src --ext .ts -f @microsoft/eslint-formatter-sarif -o typescript-security.sarif || true

    - name: Upload TypeScript SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: Packages/src/TypeScriptServer~/typescript-security.sarif
        category: "ESLint-Security"